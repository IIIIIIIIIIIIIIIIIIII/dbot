import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Point;

import org.dreambot.api.methods.Calculations;
import org.dreambot.api.methods.container.impl.bank.BankLocation;
import org.dreambot.api.methods.container.impl.bank.BankMode;
import org.dreambot.api.methods.map.Area;
import org.dreambot.api.methods.map.Tile;
import org.dreambot.api.methods.skills.Skill;
import org.dreambot.api.methods.tabs.Tab;
import org.dreambot.api.methods.widget.Widget;
import org.dreambot.api.methods.world.World;
import org.dreambot.api.script.AbstractScript;
import org.dreambot.api.script.Category;
import org.dreambot.api.script.ScriptManifest;
import org.dreambot.api.script.listener.MessageListener;
import org.dreambot.api.utilities.Timer;
import org.dreambot.api.wrappers.interactive.GameObject;
import org.dreambot.api.wrappers.interactive.NPC;
import org.dreambot.api.wrappers.items.GroundItem;
import org.dreambot.api.wrappers.widgets.WidgetChild;
import org.dreambot.api.wrappers.widgets.message.Message;
import org.dreambot.api.utilities.Timer;

@ScriptManifest(author = "Mw130", category = Category.MISC, description = "Runs Blast Furnace", name = "BlastFurnace by MW 60 support", version = 4.0)
public class Main extends AbstractScript {

    private GameObject furnace;
    private GameObject sink;
    private GameObject bank;
    private GameObject barDispenser;

    private NPC foreman;

    private WidgetChild ironClick;
    private WidgetChild closeClick;

    private Tile conveyorPreTile = new Tile(1937, 4967);
    private Tile conveyorTile = new Tile(1942, 4967);

    private Timer foremanTimer;
    private Timer realTime;

    private Point mousePoint = new Point(214, 48);

    private int oresSmelted = 0;
    private int tempStore = 0;
    private int tempStore2;
    private int State = 0;

    private Boolean needsToCool = true;



    public void onStart() {
    	getSkillTracker().start(Skill.SMITHING);

        realTime = new Timer();
        foremanTimer = new Timer();

        State = 0;
		/*
		 * (ironClick = getWidgets().getWidgetChild(28, 109); if(ironClick!=
		 * null){ ironClick.interact();}
		 */
    }

    public void onPaint(Graphics g) {
        Color myColor = new Color(0, 0, 0, 150);
        Color greenColor = new Color(0, 239, 80, 150);

        Font helvetica = new Font("Helvetica", Font.BOLD, 13);
        g.setFont(helvetica);
        g.setColor(myColor);
        g.fillRect(50, 40, 100, 180);
        g.setColor(greenColor);

        g.drawString(realTime.formatTime(), 50, 55);

        g.drawString("Ores/hr " + realTime.getHourlyRate(oresSmelted), 50, 110);

        g.drawString("Ores: " + oresSmelted, 50, 80);
        g.drawString("XP/hr: " + getSkillTracker().getGainedExperiencePerHour(Skill.SMITHING), 50, 140);
        g.drawString("XP gained: " + getSkillTracker().getGainedExperience(Skill.SMITHING), 50, 170);
        g.drawString("State: " + State, 50, 200);

    }

    @Override
    public int onLoop() {
        if (getDialogues().inDialogue() && getDialogues().canContinue()) {
            getDialogues().clickContinue();
        }

       if(getSkills().getRealLevel(Skill.SMITHING) <60){
       if (foremanTimer.elapsed() > Calculations.random(550000,580000)) {
            tempStore = State;
            State = 6;

            foremanTimer.reset();
        }
       }

        //use if -> else if chain to prevent checking of State 8 times every loop.
        if (State == 0) {
            Bank();
        } else if (State == 1) {
            walkOff1();
        } else if (State == 2) {
            walkOff2();
        } else if (State == 3) {
            Smelt();
        } else if (State == 4) {
            coolAndCollect();
        } else if (State == 5) {
            barCollect();
        } else if (State == 6) {
            payForeman();
        } else if (State == 7) {
            walkToBank();
        }
		/*
		 * if(getMouse().getPosition() == mousePoint &&
		 * !getInventory().contains(1929) ){ ironClick =
		 * getWidgets().getWidgetChild(28, 109);
		 *
		 * if(ironClick != null){ log("widget not null"); ironClick.interact();
		 * if(!getInventory().contains(2351)){ ironClick.interact(); }
		 * sleepUntil(() -> getInventory().contains(2351), 15000); } }
		 */



        return 0;
    }

    public void payForeman() {
        foreman = getNpcs().closest(2923);
        getCamera().rotateToEntity(foreman);
        WidgetChild closeClick = getWidgets().getWidgetChild(28, 120);
        if (closeClick != null && closeClick.isVisible()){
            log("widge not null");
            closeClick.interact();
            sleepUntil(() -> !closeClick.isVisible(), 15000); //object wont be null as you aren't re-assigning it. still exists in memory and you already null check it
        } 
        else if (getBank().isOpen()) {
                getBank().close();
                sleepUntil(() -> !getBank().isOpen(), 15000);
        }
          
         if (foreman != null) {
                    foreman.interact("Pay");
                    sleepUntil(() -> getDialogues().inDialogue(), 15000);
                    getKeyboard().type("1");
                    State = tempStore;
              
            }
        }
    

    public void Bank() {
        log("bank");

        bank = getGameObjects().closest(26707);
        if (bank != null) {

            sleep(500, 800);
            bank.interact("Use");

            sleepUntil(() -> getBank().isOpen(), 15000);
            if (getInventory().contains(2351)) {
                getBank().depositAll(2351);
                sleepUntil(() -> !getInventory().contains(2351), 15000);

            }

            // iron ore withdrawal
            if (!getInventory().contains(440) || !getInventory().isFull()) {
                getBank().withdrawAll(440);
                sleepUntil(() -> getInventory().contains(440), 15000);
            }
            getBank().close();
            sleepUntil(() -> !getBank().isOpen(), 15000);

            State = 1;
            log("bank DONE");
        }
    }

    public void walkOff1() {
        furnace = getGameObjects().closest(9100);

        if (getInventory().contains(2351) || !getInventory().contains(440)) {
            State = 0;
        }
        log("WalkOff");
        sink = getGameObjects().closest(9143);
        if (getInventory().contains(1925)) {

        	sink.interact("Fill-bucket");
        	sleepUntil(() -> getInventory().contains(1929), 15000);
        }
        if (!getInventory().contains(1929)) {
            State = 1;
        }
        getCamera().rotateToTile(new Tile(1937, 4967));
        sleep(1000, 2000);
        if (getWalking().getDestinationDistance() <= Calculations.random(1, 2)) {
            getWalking().walk(new Tile(1937, 4967));
        }
        sleep(1500, 2300);
        if (conveyorPreTile.distance(getLocalPlayer()) <= Calculations.random(3, 5)) {
            State = 2;
        }
    }

    public void walkOff2() {
        getCamera().rotateToEntity(furnace);
        sleep(500, 900);
        if (getWalking().getDestinationDistance() <= Calculations.random(4, 7)) {
            getWalking().walk(conveyorTile);
        }
        sleep(1000, 2000);
        if (conveyorTile.distance(getLocalPlayer()) <= Calculations.random(3, 5)) {
            State = 3;
        }

    }

    public void Smelt() {
        furnace = getGameObjects().closest(9100);
        getCamera().rotateToEntity(furnace);
        if (furnace != null) {
            furnace.interact("Put-ore-on");

            sleepUntil(() -> getDialogues().inDialogue(), 15000);
            getKeyboard().type("1");

            sleepUntil(() -> !getInventory().contains(440), 15000);
            oresSmelted += 26;
            walkToDispenser();
            State = 4;
        }
    }

    WidgetChild collectWidget;
    Tile dispenserTile = new Tile(1940, 4964);

    public void walkToDispenser() {
        if (getWalking().getDestinationDistance() <= Calculations.random(2, 3)) {
            getWalking().walk(dispenserTile);
        }
        sleepUntil(() -> getLocalPlayer().distance(dispenserTile) <= 0, 15000);

    }

    public void coolAndCollect() {

        needsToCool = true;
        barDispenser = getGameObjects().closest(9092);
        if (barDispenser != null) {

            getInventory().get(1929).useOn(barDispenser);
            sleep(1000, 2000);
            log("cool walk over");
        }

        State = 5;

    }

    public void barCollect() {
        log("collecting");
        barDispenser = getGameObjects().closest(9092);

        if (barDispenser != null && barDispenser.hasAction("Take")) {
            barDispenser.interact("Take");

        }
        if (barDispenser != null && barDispenser.hasAction("Search")) {
            getMouse().moveMouseOutsideScreen();
            sleepUntil(() -> barDispenser.hasAction("Take"), 15000);
            barDispenser.interact("Take");
        }
        ironClick = getWidgets().getWidgetChild(28, 109);
        closeClick = getWidgets().getWidgetChild(28, 119);

        if (ironClick != null) {
            ironClick.interact();
            if (!getInventory().contains(2351)) {
                ironClick.interact();
            }
            sleepUntil(() -> getInventory().contains(2351), 15000);
			/*
			 * getMouse().move(new Point(Calculations.random(482,
			 * 488),Calculations.random(40, 50))); getMouse().click();
			 */
            if (closeClick != null) {
                closeClick.interact();
            }
            sleepUntil(() -> closeClick.interact(), 15000);

            if (!getInventory().contains(2351)) {
                State = 5;
            }
			/*
			 * bank = getGameObjects().closest(26707); if (bank != null){
			 *
			 * bank.interact("Use"); }
			 */
            State = 7;
        }

    }

    public Tile nearbyBankTile = new Tile(1942, 4959);

    public void walkToBank() {
        if (getWalking().getDestinationDistance() <= Calculations.random(2, 3)) {
            getWalking().walk(nearbyBankTile);
        }
        sleep(1000, 2000);
        if (nearbyBankTile.distance(getLocalPlayer()) <= Calculations.random(1, 2)) {
            State = 0;
        }

    }

    @Override
    public void onMessage(Message m) {
        if (m.getMessage().contains("You don't need to cool the bars")) {
            needsToCool = true;
        }
    }

    public void runToFurnace() {

    }

}
